#!/usr/bin/env bash

set -eo pipefail

if [ -n "${BUILDPACK_DEBUG}" ]
then
    set -x
fi

readonly BUILD_DIR="${1}"
readonly CACHE_DIR="${2}"
readonly ENV_DIR="${3}"

readonly BASE_DIR="$( cd -P "$( dirname "$0" )" && pwd )"
readonly BUILDPACK_DIR="$( readlink -f "${BASE_DIR}/.." )"

readonly R_VERSION="${R_VERSION:-4.0.0}"
readonly url="https://cran.r-project.org/src/base/R-${R_VERSION:0:1}/R-${R_VERSION}.tar.gz"

readonly gfortran_package="gfortran-10"


export APT_FILE_MANIFEST="${APT_FILE_MANIFEST:-Aptfile.R}"


# ----
# Install gfortran to compile R

# Use Apt buildpack to install gfortran
cat <<EOF >>"${BUILD_DIR}/${APT_FILE_MANIFEST}"
${gfortran_package}
libgomp1
EOF

cd "${HOME}"
apt_deps_buildpack_dir="$( mktemp apt_buildpack_XXXX )"
# We only need a random name, so we can safely delete the file:
rm "${apt_deps_buildpack_dir}"

readonly apt_buildpack_url="https://github.com/Scalingo/apt-buildpack.git"
git clone --depth=1 "${apt_buildpack_url}" "${apt_deps_buildpack_dir}"

"${apt_deps_buildpack_dir}/bin/compile" \
    "${BUILD_DIR}" "${CACHE_DIR}" "${ENV_DIR}"


# Check if the apt-buildpack left behind an environment for
# subsequent ones:
if [ -e "${HOME}/${apt_deps_buildpack_dir}/export" ]; then
    source "${HOME}/${apt_deps_buildpack_dir}/export"
fi


#R_HOME="${BUILD_DIR}/R-${R_VERSION}/lib"
#export R_HOME

PATH="\$HOME/.apt/bin/x86_64-linux-gnu-gfortran:${PATH}"
export PATH


# ----
# Download and compile R

curl --location "${url}" --output "${CACHE_DIR}/R-${R_VERSION}.tar.gz"

tar --extract --gzip --verbose --file="${CACHE_DIR}/R-${R_VERSION}.tar.gz" \
    --directory "${CACHE_DIR}"

pushd "${CACHE_DIR}/R-${R_VERSION}"

./configure \
    FC="${gfortran_package}" CFLAGS='-g -O0' CXXFLAGS='-g -O0' FCFLAGS='-g -O0' LIBnn=lib \
    --prefix="${BUILD_DIR}/R-${R_VERSION}" \
    --libdir="${BUILD_DIR}/R-${R_VERSION}/lib" \
    --enable-java=no \
    --with-recommended-packages=no \
    --without-x

make FC="${gfortran_package}"
make install rhome="/app/R-${R_VERSION}"

popd

# `make install` put things in /app/R-version, which is likely to be removed.
# So we copy these things back in $BUILD_DIR which is then "deployed" in /app
cp -a "/app/R-${R_VERSION}/." "${BUILD_DIR}/R-${R_VERSION}/"


pushd "${BUILD_DIR}"
ln --symbolic --no-dereference --force "R-${R_VERSION}" "R"
popd


# ---
# Writing profile script

mkdir -p ${BUILD_DIR}/.profile.d

cat <<EOF >${BUILD_DIR}/.profile.d/R.sh
export PATH="\$HOME/R/bin:\$HOME/.apt/usr/bin:\$HOME/.apt/usr/sbin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/lib:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/lib:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$HOME/.apt/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="/app/R-${R_VERSION}/bin:/app/.apt/usr/bin:/app/.apt/usr/sbin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/lib:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"

R --file=${HOME}/install-shiny.R --gui-none --no-save

echo "Done."
